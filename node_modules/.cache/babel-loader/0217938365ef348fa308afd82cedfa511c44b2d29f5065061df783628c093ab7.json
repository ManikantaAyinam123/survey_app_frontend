{"ast":null,"code":"import axios from 'axios';\nconst all_voters = \"http://localhost:3000/voters\";\nconst search_by_name = \"http://localhost:3000/voters/search_by_name\";\nconst filter_casted_status = \"http://localhost:3000/voters/filter_casted_status\";\nconst baseURL = 'http://localhost:3000/voters';\nexport const fetchAllVotersData = async page => {\n  try {\n    const response = await axios.get(`${all_voters}?page=${page}`);\n    const data = response.data;\n    console.log(\"thisis api data\", data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching all voters data:', error);\n    throw error;\n  }\n};\nexport const searchByNameData = async name => {\n  try {\n    console.log(\"fromapi\", name);\n    const response = await axios.get(`${search_by_name}?voter_name=${name}`);\n    console.log(response.data);\n    const data = response.data;\n    console.log(\"Search by Name Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error searching by name:', error);\n    throw error;\n  }\n};\nexport const filterByCastedStatusData = async (casted, page) => {\n  try {\n    console.log(\"Filter by Casted Status Data from API\", page);\n    const response = await axios.get(`${filter_casted_status}?casted=${casted}&page=${page}`);\n    const data = response.data;\n    console.log(\"Filter by Casted Status Data from API\", response);\n    return data;\n  } catch (error) {\n    console.error('Error filtering by casted status:', error);\n    throw error;\n  }\n};\nexport const updateVoter = async (id, updatedFields) => {\n  try {\n    const response = await axios.put(`http://localhost:3000/voters/${id}`, updatedFields);\n    console.log('Update voter response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating voter:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","all_voters","search_by_name","filter_casted_status","baseURL","fetchAllVotersData","page","response","get","data","console","log","error","searchByNameData","name","filterByCastedStatusData","casted","updateVoter","id","updatedFields","put"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/api/getData.js"],"sourcesContent":["import axios from 'axios';\n\nconst all_voters = \"http://localhost:3000/voters\";\nconst search_by_name = \"http://localhost:3000/voters/search_by_name\";\nconst filter_casted_status = \"http://localhost:3000/voters/filter_casted_status\";\nconst baseURL = 'http://localhost:3000/voters';\n\nexport const fetchAllVotersData = async (page) => {\n  try {\n    const response = await axios.get(`${all_voters}?page=${page}`);\n    const data = response.data;\n    console.log(\"thisis api data\",data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching all voters data:', error);\n    throw error;\n  }\n};\n\nexport const searchByNameData = async (name) => {\n  try {\n    console.log(\"fromapi\", name);\n    const response = await axios.get(`${search_by_name}?voter_name=${name}`);\n    console.log(response.data);\n    const data = response.data;\n    console.log(\"Search by Name Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error searching by name:', error);\n    throw error;\n  }\n};\n\nexport const filterByCastedStatusData = async (casted, page) => {\n  try {\n    console.log(\"Filter by Casted Status Data from API\", page);\n    const response = await axios.get(`${filter_casted_status}?casted=${casted}&page=${page}`);\n    const data = response.data;\n    console.log(\"Filter by Casted Status Data from API\", response);\n    return data;\n  } catch (error) {\n    console.error('Error filtering by casted status:', error);\n    throw error;\n  }\n};\n\nexport const updateVoter = async (id, updatedFields) => {\n  try {\n    const response = await axios.put(`http://localhost:3000/voters/${id}`, updatedFields);\n    console.log('Update voter response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating voter:', error);\n    throw error;\n  }\n};\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,8BAA8B;AACjD,MAAMC,cAAc,GAAG,6CAA6C;AACpE,MAAMC,oBAAoB,GAAG,mDAAmD;AAChF,MAAMC,OAAO,GAAG,8BAA8B;AAE9C,OAAO,MAAMC,kBAAkB,GAAG,MAAOC,IAAI,IAAK;EAChD,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAE,GAAEP,UAAW,SAAQK,IAAK,EAAC,CAAC;IAC9D,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACF,IAAI,CAAC;IACnC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAOC,IAAI,IAAK;EAC9C,IAAI;IACFJ,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEG,IAAI,CAAC;IAC5B,MAAMP,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAE,GAAEN,cAAe,eAAcY,IAAK,EAAC,CAAC;IACxEJ,OAAO,CAACC,GAAG,CAACJ,QAAQ,CAACE,IAAI,CAAC;IAC1B,MAAMA,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BC,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEF,IAAI,CAAC;IACjD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMG,wBAAwB,GAAG,MAAAA,CAAOC,MAAM,EAAEV,IAAI,KAAK;EAC9D,IAAI;IACFI,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEL,IAAI,CAAC;IAC1D,MAAMC,QAAQ,GAAG,MAAMP,KAAK,CAACQ,GAAG,CAAE,GAAEL,oBAAqB,WAAUa,MAAO,SAAQV,IAAK,EAAC,CAAC;IACzF,MAAMG,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BC,OAAO,CAACC,GAAG,CAAC,uCAAuC,EAAEJ,QAAQ,CAAC;IAC9D,OAAOE,IAAI;EACb,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMK,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAEC,aAAa,KAAK;EACtD,IAAI;IACF,MAAMZ,QAAQ,GAAG,MAAMP,KAAK,CAACoB,GAAG,CAAE,gCAA+BF,EAAG,EAAC,EAAEC,aAAa,CAAC;IACrFT,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEJ,QAAQ,CAACE,IAAI,CAAC;IACpD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOG,KAAK,EAAE;IACdF,OAAO,CAACE,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}