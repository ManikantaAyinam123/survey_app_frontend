{"ast":null,"code":"import { FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE, UPDATE_VOTER_REQUEST, UPDATE_VOTER_SUCCESS, UPDATE_VOTER_FAILURE, FETCH_CONSISTENCY_NAMES_REQUEST, FETCH_CONSISTENCY_NAMES_SUCCESS, FETCH_CONSISTENCY_NAMES_FAILURE, FETCH_BOOTH_NAMES_REQUEST, FETCH_BOOTH_NAMES_SUCCESS, FETCH_BOOTH_NAMES_FAILURE } from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData, updateVoter, fetchConsistencyNamesData, fetchBoothNamesData } from '../api/getData';\nexport const fetchAllVotersAction = (page = 1) => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_ALL_VOTERS_REQUEST\n    });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({\n        type: FETCH_ALL_VOTERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_ALL_VOTERS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const searchByNameAction = searchName => {\n  console.log(\"name in action\", searchName);\n  return async dispatch => {\n    dispatch({\n      type: SEARCH_BY_NAME_REQUEST\n    });\n    try {\n      const data = await searchByNameData(searchName);\n      console.log(searchName);\n      console.log(\"this is name search\");\n      dispatch({\n        type: SEARCH_BY_NAME_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_BY_NAME_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  console.log(\"page\", page);\n  return async dispatch => {\n    dispatch({\n      type: FILTER_BY_CASTED_STATUS_REQUEST\n    });\n    try {\n      const data = await filterByCastedStatusData(casted, page);\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\", updatedFields);\n  return async dispatch => {\n    dispatch({\n      type: UPDATE_VOTER_REQUEST\n    });\n    try {\n      const data = await updateVoter(voterId, updatedFields);\n      console.log('Voter updated successfully:', data);\n      dispatch({\n        type: UPDATE_VOTER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({\n        type: UPDATE_VOTER_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchConsistencyNamesAction = name => {\n  console.log(\"in action\", name);\n  return async dispatch => {\n    dispatch({\n      type: FETCH_CONSISTENCY_NAMES_REQUEST\n    });\n    try {\n      const data = await fetchConsistencyNamesData(name);\n      dispatch({\n        type: FETCH_CONSISTENCY_NAMES_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_CONSISTENCY_NAMES_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchBoothNamesAction = name => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_BOOTH_NAMES_REQUEST\n    });\n    try {\n      const data = await fetchBoothNamesData(name);\n      dispatch({\n        type: FETCH_BOOTH_NAMES_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_BOOTH_NAMES_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_ALL_VOTERS_REQUEST","FETCH_ALL_VOTERS_SUCCESS","FETCH_ALL_VOTERS_FAILURE","SEARCH_BY_NAME_REQUEST","SEARCH_BY_NAME_SUCCESS","SEARCH_BY_NAME_FAILURE","FILTER_BY_CASTED_STATUS_REQUEST","FILTER_BY_CASTED_STATUS_SUCCESS","FILTER_BY_CASTED_STATUS_FAILURE","UPDATE_VOTER_REQUEST","UPDATE_VOTER_SUCCESS","UPDATE_VOTER_FAILURE","FETCH_CONSISTENCY_NAMES_REQUEST","FETCH_CONSISTENCY_NAMES_SUCCESS","FETCH_CONSISTENCY_NAMES_FAILURE","FETCH_BOOTH_NAMES_REQUEST","FETCH_BOOTH_NAMES_SUCCESS","FETCH_BOOTH_NAMES_FAILURE","fetchAllVotersData","searchByNameData","filterByCastedStatusData","updateVoter","fetchConsistencyNamesData","fetchBoothNamesData","fetchAllVotersAction","page","dispatch","type","data","payload","error","message","searchByNameAction","searchName","console","log","filterByCastedStatusAction","casted","updateVoterAction","voterId","updatedFields","fetchConsistencyNamesAction","name","fetchBoothNamesAction"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/actions/action.js"],"sourcesContent":["import { \n  FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, \n  SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, \n  FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE ,UPDATE_VOTER_REQUEST,\n  UPDATE_VOTER_SUCCESS,\n  UPDATE_VOTER_FAILURE,\n  FETCH_CONSISTENCY_NAMES_REQUEST,\n  FETCH_CONSISTENCY_NAMES_SUCCESS,\n  FETCH_CONSISTENCY_NAMES_FAILURE,\n  FETCH_BOOTH_NAMES_REQUEST, FETCH_BOOTH_NAMES_SUCCESS, FETCH_BOOTH_NAMES_FAILURE,\n\n} from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData, updateVoter,fetchConsistencyNamesData, fetchBoothNamesData } from '../api/getData'; \n\nexport const fetchAllVotersAction = (page = 1) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_ALL_VOTERS_REQUEST });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({ type: FETCH_ALL_VOTERS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_ALL_VOTERS_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const searchByNameAction = (searchName) => {\n  console.log(\"name in action\",searchName);\n  return async (dispatch) => {\n    dispatch({ type: SEARCH_BY_NAME_REQUEST });\n    try {\n      const data = await searchByNameData(searchName); \n      console.log(searchName);\n      console.log(\"this is name search\")\n      dispatch({ type: SEARCH_BY_NAME_SUCCESS, payload: data });\n\n    } catch (error) {\n      dispatch({ type: SEARCH_BY_NAME_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  console.log(\"page\", page);\n  \n  return async (dispatch) => {\n    dispatch({ type: FILTER_BY_CASTED_STATUS_REQUEST });\n    try {\n      const data = await filterByCastedStatusData(casted, page);\n      dispatch({ type: FILTER_BY_CASTED_STATUS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FILTER_BY_CASTED_STATUS_FAILURE, payload: error.message });\n    }\n  };\n};\n\n\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\",updatedFields)\n  return async (dispatch) => {\n    dispatch({ type: UPDATE_VOTER_REQUEST });\n    try {\n      const data = await updateVoter(voterId, updatedFields); \n      console.log('Voter updated successfully:', data);\n      dispatch({ type: UPDATE_VOTER_SUCCESS, payload: data });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({ type: UPDATE_VOTER_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const fetchConsistencyNamesAction = (name) => {\n  console.log(\"in action\",name);\n  return async (dispatch) => {\n    dispatch({ type: FETCH_CONSISTENCY_NAMES_REQUEST });\n    try {\n      const data = await fetchConsistencyNamesData(name);\n      dispatch({ type: FETCH_CONSISTENCY_NAMES_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_CONSISTENCY_NAMES_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const fetchBoothNamesAction = (name) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_BOOTH_NAMES_REQUEST });\n    try {\n      const data = await fetchBoothNamesData(name);\n      dispatch({ type: FETCH_BOOTH_NAMES_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_BOOTH_NAMES_FAILURE, payload: error.message });\n    }\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}