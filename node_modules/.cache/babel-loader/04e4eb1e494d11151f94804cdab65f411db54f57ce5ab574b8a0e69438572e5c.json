{"ast":null,"code":"import { FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE, UPDATE_VOTER_REQUEST, UPDATE_VOTER_SUCCESS, UPDATE_VOTER_FAILURE, FETCH_CONSISTENCY_NAMES_REQUEST, FETCH_CONSISTENCY_NAMES_SUCCESS, FETCH_CONSISTENCY_NAMES_FAILURE, FETCH_BOOTH_NAMES_REQUEST, FETCH_BOOTH_NAMES_SUCCESS, FETCH_BOOTH_NAMES_FAILURE, LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE } from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData, updateVoter, fetchConsistencyNamesData, fetchBoothNamesData } from '../api/getData';\nexport const fetchAllVotersAction = (page = 1, boothName) => {\n  console.log(\"action all voters data\", boothName);\n  return async dispatch => {\n    dispatch({\n      type: FETCH_ALL_VOTERS_REQUEST\n    });\n    try {\n      const data = await fetchAllVotersData(page, boothName);\n      dispatch({\n        type: FETCH_ALL_VOTERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_ALL_VOTERS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const searchByNameAction = (searchName, boothName) => {\n  console.log(\"name in action ===============>\", searchName, boothName);\n  return async dispatch => {\n    dispatch({\n      type: SEARCH_BY_NAME_REQUEST\n    });\n    try {\n      const data = await searchByNameData(searchName, boothName);\n      dispatch({\n        type: SEARCH_BY_NAME_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_BY_NAME_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const filterByCastedStatusAction = (casted, page = 1, boothName) => {\n  console.log(\"casted status in action------------------>\", casted, page, boothName);\n  return async dispatch => {\n    dispatch({\n      type: FILTER_BY_CASTED_STATUS_REQUEST\n    });\n    try {\n      const data = await filterByCastedStatusData(casted, page, boothName);\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\", updatedFields);\n  return async dispatch => {\n    dispatch({\n      type: UPDATE_VOTER_REQUEST\n    });\n    try {\n      const data = await updateVoter(voterId, updatedFields);\n      console.log('Voter updated successfully:', data);\n      dispatch({\n        type: UPDATE_VOTER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({\n        type: UPDATE_VOTER_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchConsistencyNamesAction = name => {\n  console.log(\"in action\", name);\n  return async dispatch => {\n    dispatch({\n      type: FETCH_CONSISTENCY_NAMES_REQUEST\n    });\n    try {\n      const data = await fetchConsistencyNamesData(name);\n      dispatch({\n        type: FETCH_CONSISTENCY_NAMES_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_CONSISTENCY_NAMES_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const fetchBoothNamesAction = name => {\n  console.log(\"Action in booth\", name);\n  return async dispatch => {\n    dispatch({\n      type: FETCH_BOOTH_NAMES_REQUEST\n    });\n    try {\n      const data = await fetchBoothNamesData(name);\n      dispatch({\n        type: FETCH_BOOTH_NAMES_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_BOOTH_NAMES_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const loginAction = formData => {\n  console.log(\"Login action triggered with formData:\", formData);\n  return async dispatch => {\n    dispatch({\n      type: LOGIN_REQUEST\n    });\n    try {\n      const data = await loginData(formData);\n      localStorage.setItem('userType', data.user_type);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('name', data.username);\n      axios.defaults.headers.common['Authorization'] = `${data.token}`;\n      dispatch({\n        type: LOGIN_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: LOGIN_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_ALL_VOTERS_REQUEST","FETCH_ALL_VOTERS_SUCCESS","FETCH_ALL_VOTERS_FAILURE","SEARCH_BY_NAME_REQUEST","SEARCH_BY_NAME_SUCCESS","SEARCH_BY_NAME_FAILURE","FILTER_BY_CASTED_STATUS_REQUEST","FILTER_BY_CASTED_STATUS_SUCCESS","FILTER_BY_CASTED_STATUS_FAILURE","UPDATE_VOTER_REQUEST","UPDATE_VOTER_SUCCESS","UPDATE_VOTER_FAILURE","FETCH_CONSISTENCY_NAMES_REQUEST","FETCH_CONSISTENCY_NAMES_SUCCESS","FETCH_CONSISTENCY_NAMES_FAILURE","FETCH_BOOTH_NAMES_REQUEST","FETCH_BOOTH_NAMES_SUCCESS","FETCH_BOOTH_NAMES_FAILURE","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","fetchAllVotersData","searchByNameData","filterByCastedStatusData","updateVoter","fetchConsistencyNamesData","fetchBoothNamesData","fetchAllVotersAction","page","boothName","console","log","dispatch","type","data","payload","error","message","searchByNameAction","searchName","filterByCastedStatusAction","casted","updateVoterAction","voterId","updatedFields","fetchConsistencyNamesAction","name","fetchBoothNamesAction","loginAction","formData","loginData","localStorage","setItem","user_type","token","username","axios","defaults","headers","common"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/actions/action.js"],"sourcesContent":["import { \n  FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, \n  SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, \n  FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE ,UPDATE_VOTER_REQUEST,\n  UPDATE_VOTER_SUCCESS,\n  UPDATE_VOTER_FAILURE,\n  FETCH_CONSISTENCY_NAMES_REQUEST,\n  FETCH_CONSISTENCY_NAMES_SUCCESS,\n  FETCH_CONSISTENCY_NAMES_FAILURE,\n  FETCH_BOOTH_NAMES_REQUEST, FETCH_BOOTH_NAMES_SUCCESS, FETCH_BOOTH_NAMES_FAILURE,\n   LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE \n} from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData, updateVoter,fetchConsistencyNamesData, fetchBoothNamesData } from '../api/getData'; \n\nexport const fetchAllVotersAction = (page = 1,boothName) => {\n \n  console.log(\"action all voters data\",boothName);\n  return async (dispatch) => {\n    dispatch({ type: FETCH_ALL_VOTERS_REQUEST });\n    try {\n      const data = await fetchAllVotersData(page,boothName);\n      dispatch({ type: FETCH_ALL_VOTERS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_ALL_VOTERS_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const searchByNameAction = (searchName,boothName) => {\n  console.log(\"name in action ===============>\",searchName,boothName);\n  return async (dispatch) => {\n    dispatch({ type: SEARCH_BY_NAME_REQUEST });\n    try {\n      const data = await searchByNameData(searchName,boothName); \n      dispatch({ type: SEARCH_BY_NAME_SUCCESS, payload: data });\n\n    } catch (error) {\n      dispatch({ type: SEARCH_BY_NAME_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const filterByCastedStatusAction = (casted, page = 1, boothName) => {\n  console.log(\"casted status in action------------------>\", casted,page, boothName);\n  \n  return async (dispatch) => {\n    dispatch({ type: FILTER_BY_CASTED_STATUS_REQUEST });\n    try {\n      const data = await filterByCastedStatusData(casted, page, boothName);\n      dispatch({ type: FILTER_BY_CASTED_STATUS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FILTER_BY_CASTED_STATUS_FAILURE, payload: error.message });\n    }\n  };\n};\n\n\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\",updatedFields)\n  return async (dispatch) => {\n    dispatch({ type: UPDATE_VOTER_REQUEST });\n    try {\n      const data = await updateVoter(voterId, updatedFields); \n      console.log('Voter updated successfully:', data);\n      dispatch({ type: UPDATE_VOTER_SUCCESS, payload: data });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({ type: UPDATE_VOTER_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const fetchConsistencyNamesAction = (name) => {\n  console.log(\"in action\",name);\n  return async (dispatch) => {\n    dispatch({ type: FETCH_CONSISTENCY_NAMES_REQUEST });\n    try {\n      const data = await fetchConsistencyNamesData(name);\n      dispatch({ type: FETCH_CONSISTENCY_NAMES_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_CONSISTENCY_NAMES_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const fetchBoothNamesAction = (name) => {\n  console.log(\"Action in booth\",name);\n  return async (dispatch) => {\n    dispatch({ type: FETCH_BOOTH_NAMES_REQUEST });\n    try {\n      const data = await fetchBoothNamesData(name);\n      dispatch({ type: FETCH_BOOTH_NAMES_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_BOOTH_NAMES_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const loginAction = (formData) => {\n  console.log(\"Login action triggered with formData:\", formData);\n  return async (dispatch) => {\n    dispatch({ type: LOGIN_REQUEST });\n    try {\n     \n      const data = await loginData(formData);\n     \n      localStorage.setItem('userType', data.user_type);\n      localStorage.setItem('token', data.token);\n      localStorage.setItem('name', data.username);\n      \n     \n      axios.defaults.headers.common['Authorization'] = `${data.token}`;\n\n      dispatch({ type: LOGIN_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: LOGIN_FAILURE, payload: error.message });\n    }\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}