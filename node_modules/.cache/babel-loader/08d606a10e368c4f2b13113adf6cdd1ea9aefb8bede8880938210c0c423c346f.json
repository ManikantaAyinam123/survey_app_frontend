{"ast":null,"code":"import { FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE } from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData } from '../api/getData';\nexport const fetchAllVotersAction = (page = 1) => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_ALL_VOTERS_REQUEST\n    });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({\n        type: FETCH_ALL_VOTERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_ALL_VOTERS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const searchByNameAction = searchName => {\n  return async dispatch => {\n    dispatch({\n      type: SEARCH_BY_NAME_REQUEST\n    });\n    try {\n      const data = await searchByNameData(searchName);\n      console.log(searchName);\n      console.log(\"this is name search\");\n      dispatch({\n        type: SEARCH_BY_NAME_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_BY_NAME_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  return async dispatch => {\n    console.log(\"params checking\", casted);\n    dispatch({\n      type: FILTER_BY_CASTED_STATUS_REQUEST\n    });\n    try {\n      const data = await filterByCastedStatusData(casted);\n      console.log(\"this is casted data\", data);\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_ALL_VOTERS_REQUEST","FETCH_ALL_VOTERS_SUCCESS","FETCH_ALL_VOTERS_FAILURE","SEARCH_BY_NAME_REQUEST","SEARCH_BY_NAME_SUCCESS","SEARCH_BY_NAME_FAILURE","FILTER_BY_CASTED_STATUS_REQUEST","FILTER_BY_CASTED_STATUS_SUCCESS","FILTER_BY_CASTED_STATUS_FAILURE","fetchAllVotersData","searchByNameData","filterByCastedStatusData","fetchAllVotersAction","page","dispatch","type","data","payload","error","message","searchByNameAction","searchName","console","log","filterByCastedStatusAction","casted"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/actions/action.js"],"sourcesContent":["import { \n  FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, \n  SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, \n  FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE \n} from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData } from '../api/getData'; \n\nexport const fetchAllVotersAction = (page = 1) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_ALL_VOTERS_REQUEST });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({ type: FETCH_ALL_VOTERS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_ALL_VOTERS_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const searchByNameAction = (searchName) => {\n  return async (dispatch) => {\n    dispatch({ type: SEARCH_BY_NAME_REQUEST });\n    try {\n      const data = await searchByNameData(searchName); \n      console.log(searchName);\n      console.log(\"this is name search\")\n      dispatch({ type: SEARCH_BY_NAME_SUCCESS, payload: data });\n\n    } catch (error) {\n      dispatch({ type: SEARCH_BY_NAME_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  return async (dispatch) => {\n    console.log(\"params checking\",casted )\n    dispatch({ type: FILTER_BY_CASTED_STATUS_REQUEST });\n    try {\n      const data = await filterByCastedStatusData(casted); \n        console.log(\"this is casted data\",data)\n      dispatch({ type: FILTER_BY_CASTED_STATUS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FILTER_BY_CASTED_STATUS_FAILURE, payload: error.message });\n    }\n  };\n};\n"],"mappings":"AAAA,SACEA,wBAAwB,EAAEC,wBAAwB,EAAEC,wBAAwB,EAC5EC,sBAAsB,EAAEC,sBAAsB,EAAEC,sBAAsB,EACtEC,+BAA+B,EAAEC,+BAA+B,EAAEC,+BAA+B,QAC5F,eAAe;AACtB,SAASC,kBAAkB,EAAEC,gBAAgB,EAAEC,wBAAwB,QAAQ,gBAAgB;AAE/F,OAAO,MAAMC,oBAAoB,GAAGA,CAACC,IAAI,GAAG,CAAC,KAAK;EAChD,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEf;IAAyB,CAAC,CAAC;IAC5C,IAAI;MACF,MAAMgB,IAAI,GAAG,MAAMP,kBAAkB,CAACI,IAAI,CAAC;MAC3CC,QAAQ,CAAC;QAAEC,IAAI,EAAEd,wBAAwB;QAAEgB,OAAO,EAAED;MAAK,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAEb,wBAAwB;QAAEe,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IACtE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,UAAU,IAAK;EAChD,OAAO,MAAOP,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEZ;IAAuB,CAAC,CAAC;IAC1C,IAAI;MACF,MAAMa,IAAI,GAAG,MAAMN,gBAAgB,CAACW,UAAU,CAAC;MAC/CC,OAAO,CAACC,GAAG,CAACF,UAAU,CAAC;MACvBC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCT,QAAQ,CAAC;QAAEC,IAAI,EAAEX,sBAAsB;QAAEa,OAAO,EAAED;MAAK,CAAC,CAAC;IAE3D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAEV,sBAAsB;QAAEY,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IACpE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMK,0BAA0B,GAAGA,CAACC,MAAM,EAAEZ,IAAI,GAAG,CAAC,KAAK;EAC9D,OAAO,MAAOC,QAAQ,IAAK;IACzBQ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACE,MAAO,CAAC;IACtCX,QAAQ,CAAC;MAAEC,IAAI,EAAET;IAAgC,CAAC,CAAC;IACnD,IAAI;MACF,MAAMU,IAAI,GAAG,MAAML,wBAAwB,CAACc,MAAM,CAAC;MACjDH,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAACP,IAAI,CAAC;MACzCF,QAAQ,CAAC;QAAEC,IAAI,EAAER,+BAA+B;QAAEU,OAAO,EAAED;MAAK,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAEP,+BAA+B;QAAES,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC7E;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}