{"ast":null,"code":"import { FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE, UPDATE_VOTER_REQUEST, UPDATE_VOTER_SUCCESS, UPDATE_VOTER_FAILURE } from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData, updateVoter } from '../api/getData';\nexport const fetchAllVotersAction = (page = 1) => {\n  return async dispatch => {\n    dispatch({\n      type: FETCH_ALL_VOTERS_REQUEST\n    });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({\n        type: FETCH_ALL_VOTERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_ALL_VOTERS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const searchByNameAction = searchName => {\n  return async dispatch => {\n    dispatch({\n      type: SEARCH_BY_NAME_REQUEST\n    });\n    try {\n      const data = await searchByNameData(searchName);\n      console.log(searchName);\n      console.log(\"this is name search\");\n      dispatch({\n        type: SEARCH_BY_NAME_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_BY_NAME_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  console.log(\"page\", page);\n  return async dispatch => {\n    dispatch({\n      type: FILTER_BY_CASTED_STATUS_REQUEST\n    });\n    try {\n      const data = await filterByCastedStatusData(casted, page);\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\", voterId);\n  return async dispatch => {\n    dispatch({\n      type: UPDATE_VOTER_REQUEST\n    });\n    try {\n      const data = await updateVoter(voterId, updatedFields);\n      console.log('Voter updated successfully:', data);\n      dispatch({\n        type: UPDATE_VOTER_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({\n        type: UPDATE_VOTER_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_ALL_VOTERS_REQUEST","FETCH_ALL_VOTERS_SUCCESS","FETCH_ALL_VOTERS_FAILURE","SEARCH_BY_NAME_REQUEST","SEARCH_BY_NAME_SUCCESS","SEARCH_BY_NAME_FAILURE","FILTER_BY_CASTED_STATUS_REQUEST","FILTER_BY_CASTED_STATUS_SUCCESS","FILTER_BY_CASTED_STATUS_FAILURE","UPDATE_VOTER_REQUEST","UPDATE_VOTER_SUCCESS","UPDATE_VOTER_FAILURE","fetchAllVotersData","searchByNameData","filterByCastedStatusData","updateVoter","fetchAllVotersAction","page","dispatch","type","data","payload","error","message","searchByNameAction","searchName","console","log","filterByCastedStatusAction","casted","updateVoterAction","voterId","updatedFields"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/actions/action.js"],"sourcesContent":["import { \n  FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, \n  SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, \n  FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE ,UPDATE_VOTER_REQUEST,\n  UPDATE_VOTER_SUCCESS,\n  UPDATE_VOTER_FAILURE,\n} from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData,updateVoter } from '../api/getData'; \n\nexport const fetchAllVotersAction = (page = 1) => {\n  return async (dispatch) => {\n    dispatch({ type: FETCH_ALL_VOTERS_REQUEST });\n    try {\n      const data = await fetchAllVotersData(page);\n      dispatch({ type: FETCH_ALL_VOTERS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_ALL_VOTERS_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const searchByNameAction = (searchName) => {\n  return async (dispatch) => {\n    dispatch({ type: SEARCH_BY_NAME_REQUEST });\n    try {\n      const data = await searchByNameData(searchName); \n      console.log(searchName);\n      console.log(\"this is name search\")\n      dispatch({ type: SEARCH_BY_NAME_SUCCESS, payload: data });\n\n    } catch (error) {\n      dispatch({ type: SEARCH_BY_NAME_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const filterByCastedStatusAction = (casted, page = 1) => {\n  console.log(\"page\", page);\n  \n  return async (dispatch) => {\n    dispatch({ type: FILTER_BY_CASTED_STATUS_REQUEST });\n    try {\n      const data = await filterByCastedStatusData(casted, page);\n      dispatch({ type: FILTER_BY_CASTED_STATUS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FILTER_BY_CASTED_STATUS_FAILURE, payload: error.message });\n    }\n  };\n};\n\n\nexport const updateVoterAction = (voterId, updatedFields) => {\n  console.log(\"this is action for update\",voterId)\n  return async (dispatch) => {\n    dispatch({ type: UPDATE_VOTER_REQUEST });\n    try {\n      const data = await updateVoter(voterId, updatedFields); \n      console.log('Voter updated successfully:', data);\n      dispatch({ type: UPDATE_VOTER_SUCCESS, payload: data });\n    } catch (error) {\n      console.error('Error updating voter:', error);\n      dispatch({ type: UPDATE_VOTER_FAILURE, payload: error.message });\n    }\n  };\n};\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}