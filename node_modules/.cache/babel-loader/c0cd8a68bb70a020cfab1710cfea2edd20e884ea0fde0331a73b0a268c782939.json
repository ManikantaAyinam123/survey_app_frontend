{"ast":null,"code":"import { FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE } from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData } from '../api/getData';\nexport const fetchAllVotersAction = () => {\n  console.log(\"this is action file of allvotersdata\");\n  return async dispatch => {\n    dispatch({\n      type: FETCH_ALL_VOTERS_REQUEST\n    });\n    try {\n      const data = await fetchAllVotersData();\n      console.log(\"this is all data\", data);\n      dispatch({\n        type: FETCH_ALL_VOTERS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FETCH_ALL_VOTERS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const searchByNameAction = searchName => {\n  return async dispatch => {\n    dispatch({\n      type: SEARCH_BY_NAME_REQUEST\n    });\n    try {\n      const data = await searchByNameData(searchName);\n      console.log(searchName);\n      console.log(\"this is name search\");\n      dispatch({\n        type: SEARCH_BY_NAME_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: SEARCH_BY_NAME_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};\nexport const filterByCastedStatusAction = casted => {\n  return async dispatch => {\n    dispatch({\n      type: FILTER_BY_CASTED_STATUS_REQUEST\n    });\n    try {\n      const data = await filterByCastedStatusData(casted); // Call the function to filter by casted status\n      console.log(\"this is casted\");\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_SUCCESS,\n        payload: data\n      });\n    } catch (error) {\n      dispatch({\n        type: FILTER_BY_CASTED_STATUS_FAILURE,\n        payload: error.message\n      });\n    }\n  };\n};","map":{"version":3,"names":["FETCH_ALL_VOTERS_REQUEST","FETCH_ALL_VOTERS_SUCCESS","FETCH_ALL_VOTERS_FAILURE","SEARCH_BY_NAME_REQUEST","SEARCH_BY_NAME_SUCCESS","SEARCH_BY_NAME_FAILURE","FILTER_BY_CASTED_STATUS_REQUEST","FILTER_BY_CASTED_STATUS_SUCCESS","FILTER_BY_CASTED_STATUS_FAILURE","fetchAllVotersData","searchByNameData","filterByCastedStatusData","fetchAllVotersAction","console","log","dispatch","type","data","payload","error","message","searchByNameAction","searchName","filterByCastedStatusAction","casted"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/actions/action.js"],"sourcesContent":["import { \n  FETCH_ALL_VOTERS_REQUEST, FETCH_ALL_VOTERS_SUCCESS, FETCH_ALL_VOTERS_FAILURE, \n  SEARCH_BY_NAME_REQUEST, SEARCH_BY_NAME_SUCCESS, SEARCH_BY_NAME_FAILURE, \n  FILTER_BY_CASTED_STATUS_REQUEST, FILTER_BY_CASTED_STATUS_SUCCESS, FILTER_BY_CASTED_STATUS_FAILURE \n} from './actionTypes';\nimport { fetchAllVotersData, searchByNameData, filterByCastedStatusData } from '../api/getData'; \n\nexport const fetchAllVotersAction = () => {\n      console.log(\"this is action file of allvotersdata\");\n  return async (dispatch) => {\n    dispatch({ type: FETCH_ALL_VOTERS_REQUEST });\n    try {\n      const data = await fetchAllVotersData(); \n      console.log(\"this is all data\",data)\n      dispatch({ type: FETCH_ALL_VOTERS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FETCH_ALL_VOTERS_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const searchByNameAction = (searchName) => {\n  return async (dispatch) => {\n    dispatch({ type: SEARCH_BY_NAME_REQUEST });\n    try {\n      const data = await searchByNameData(searchName); \n      console.log(searchName);\n      console.log(\"this is name search\")\n      dispatch({ type: SEARCH_BY_NAME_SUCCESS, payload: data });\n\n    } catch (error) {\n      dispatch({ type: SEARCH_BY_NAME_FAILURE, payload: error.message });\n    }\n  };\n};\n\nexport const filterByCastedStatusAction = (casted) => {\n  return async (dispatch) => {\n    dispatch({ type: FILTER_BY_CASTED_STATUS_REQUEST });\n    try {\n      const data = await filterByCastedStatusData(casted); // Call the function to filter by casted status\n      console.log(\"this is casted\")\n      dispatch({ type: FILTER_BY_CASTED_STATUS_SUCCESS, payload: data });\n    } catch (error) {\n      dispatch({ type: FILTER_BY_CASTED_STATUS_FAILURE, payload: error.message });\n    }\n  };\n};\n"],"mappings":"AAAA,SACEA,wBAAwB,EAAEC,wBAAwB,EAAEC,wBAAwB,EAC5EC,sBAAsB,EAAEC,sBAAsB,EAAEC,sBAAsB,EACtEC,+BAA+B,EAAEC,+BAA+B,EAAEC,+BAA+B,QAC5F,eAAe;AACtB,SAASC,kBAAkB,EAAEC,gBAAgB,EAAEC,wBAAwB,QAAQ,gBAAgB;AAE/F,OAAO,MAAMC,oBAAoB,GAAGA,CAAA,KAAM;EACpCC,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;EACvD,OAAO,MAAOC,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEhB;IAAyB,CAAC,CAAC;IAC5C,IAAI;MACF,MAAMiB,IAAI,GAAG,MAAMR,kBAAkB,CAAC,CAAC;MACvCI,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACG,IAAI,CAAC;MACpCF,QAAQ,CAAC;QAAEC,IAAI,EAAEf,wBAAwB;QAAEiB,OAAO,EAAED;MAAK,CAAC,CAAC;IAC7D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAEd,wBAAwB;QAAEgB,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IACtE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMC,kBAAkB,GAAIC,UAAU,IAAK;EAChD,OAAO,MAAOP,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEb;IAAuB,CAAC,CAAC;IAC1C,IAAI;MACF,MAAMc,IAAI,GAAG,MAAMP,gBAAgB,CAACY,UAAU,CAAC;MAC/CT,OAAO,CAACC,GAAG,CAACQ,UAAU,CAAC;MACvBT,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MAClCC,QAAQ,CAAC;QAAEC,IAAI,EAAEZ,sBAAsB;QAAEc,OAAO,EAAED;MAAK,CAAC,CAAC;IAE3D,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAEX,sBAAsB;QAAEa,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IACpE;EACF,CAAC;AACH,CAAC;AAED,OAAO,MAAMG,0BAA0B,GAAIC,MAAM,IAAK;EACpD,OAAO,MAAOT,QAAQ,IAAK;IACzBA,QAAQ,CAAC;MAAEC,IAAI,EAAEV;IAAgC,CAAC,CAAC;IACnD,IAAI;MACF,MAAMW,IAAI,GAAG,MAAMN,wBAAwB,CAACa,MAAM,CAAC,CAAC,CAAC;MACrDX,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;MAC7BC,QAAQ,CAAC;QAAEC,IAAI,EAAET,+BAA+B;QAAEW,OAAO,EAAED;MAAK,CAAC,CAAC;IACpE,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdJ,QAAQ,CAAC;QAAEC,IAAI,EAAER,+BAA+B;QAAEU,OAAO,EAAEC,KAAK,CAACC;MAAQ,CAAC,CAAC;IAC7E;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}