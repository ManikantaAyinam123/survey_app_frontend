{"ast":null,"code":"import axios from 'axios';\nconst all_voters = \"http://localhost:3000/voters\";\nconst search_by_name = \"http://localhost:3000/voters/search_by_name\";\nconst filter_casted_status = \"http://localhost:3000/voters/filter_casted_status\";\nconst baseURL = 'http://localhost:3000/voters';\nconst consistency_names_url = \"http://localhost:3000/voters/search_by_constituency\";\nconst booth_names_url = \"http://localhost:3000/voters/search_by_booth_name\";\nexport const fetchAllVotersData = async (page, constituencyName, boothName) => {\n  console.log(\"apinames in allvoters\", constituencyName);\n  console.log(\"apinames in allvoters\", boothName);\n  try {\n    const response = await axios.get(`${all_voters}?constituency=${constituencyName}&booth_name=${boothName}&page=${page}`);\n    const data = response.data;\n    console.log(\"thisis api data\", data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching all voters data:', error);\n    throw error;\n  }\n};\nexport const searchByNameData = async (name, constituency, boothName) => {\n  try {\n    console.log(\"fromapi\", name);\n    const response = await axios.get(`${search_by_name}?voter_name=${name}&constituency=${constituency}&booth_name=${boothName}`);\n    console.log(\"search Api data\", response.data);\n    const data = response.data;\n    console.log(\"Search by Name Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error searching by name:', error);\n    throw error;\n  }\n};\nexport const filterByCastedStatusData = async (casted, page, constituencyName, boothName) => {\n  try {\n    console.log(\"Filter by Casted Status Data from API +++++>\", casted, page, constituencyName, boothName);\n    const response = await axios.get(`${filter_casted_status}?casted=${casted}&constituency=${constituencyName}&booth_name=${boothName}&page=${page}`);\n    const data = response.data;\n    console.log(\"Filter by Casted Status Data from API ////////////\", data);\n    return data;\n  } catch (error) {\n    console.error('Error filtering by casted status:', error);\n    throw error;\n  }\n};\nexport const updateVoter = async (id, updatedFields) => {\n  try {\n    const response = await axios.put(`http://localhost:3000/voters/${id}`, updatedFields);\n    console.log('Update voter response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating voter:', error);\n    throw error;\n  }\n};\nexport const fetchConsistencyNamesData = async name => {\n  console.log(\"in api\", name);\n  try {\n    const response = await axios.get(`${consistency_names_url}?constituency=${name}`);\n    const data = response.data;\n    console.log(\"api constituency\", data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching consistency names data:', error);\n    throw error;\n  }\n};\nexport const fetchBoothNamesData = async name => {\n  try {\n    console.log(\"Fetching booth names for:\", name);\n    const response = await axios.get(`${booth_names_url}?booth_name=${name}`);\n    const data = response.data;\n    console.log(\"Booth Names Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching booth names data:', error);\n    throw error;\n  }\n};","map":{"version":3,"names":["axios","all_voters","search_by_name","filter_casted_status","baseURL","consistency_names_url","booth_names_url","fetchAllVotersData","page","constituencyName","boothName","console","log","response","get","data","error","searchByNameData","name","constituency","filterByCastedStatusData","casted","updateVoter","id","updatedFields","put","fetchConsistencyNamesData","fetchBoothNamesData"],"sources":["/home/actimize/Desktop/Manikanta_Work/github/survey_app_frontend/src/redux/api/getData.js"],"sourcesContent":["import axios from 'axios';\n\nconst all_voters = \"http://localhost:3000/voters\";\nconst search_by_name = \"http://localhost:3000/voters/search_by_name\";\nconst filter_casted_status = \"http://localhost:3000/voters/filter_casted_status\";\nconst baseURL = 'http://localhost:3000/voters';\nconst consistency_names_url = \"http://localhost:3000/voters/search_by_constituency\";\nconst booth_names_url = \"http://localhost:3000/voters/search_by_booth_name\";\n\nexport const fetchAllVotersData = async (page,constituencyName,boothName) => {\n  console.log(\"apinames in allvoters\",constituencyName)\n   console.log(\"apinames in allvoters\",boothName)\n  try {\n    const response = await axios.get(`${all_voters}?constituency=${constituencyName}&booth_name=${boothName}&page=${page}`);\n    const data = response.data;\n    console.log(\"thisis api data\",data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching all voters data:', error);\n    throw error;\n  }\n};\n\nexport const searchByNameData = async (name,constituency,boothName) => {\n  try {\n    console.log(\"fromapi\", name);\n    const response = await axios.get(`${search_by_name}?voter_name=${name}&constituency=${constituency}&booth_name=${boothName}`);\n    console.log(\"search Api data\",response.data);\n    const data = response.data;\n    console.log(\"Search by Name Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error searching by name:', error);\n    throw error;\n  }\n};\n\nexport const filterByCastedStatusData = async (casted, page,constituencyName, boothName) => {\n  try {\n    console.log(\"Filter by Casted Status Data from API +++++>\",casted, page,constituencyName, boothName );\n    const response = await axios.get(`${filter_casted_status}?casted=${casted}&constituency=${constituencyName}&booth_name=${boothName}&page=${page}`);\n    const data = response.data;\n    console.log(\"Filter by Casted Status Data from API ////////////\", data);\n    return data;\n  } catch (error) {\n    console.error('Error filtering by casted status:', error);\n    throw error;\n  }\n};\n\nexport const updateVoter = async (id, updatedFields) => {\n\ntry {\n    const response = await axios.put(`http://localhost:3000/voters/${id}`, updatedFields);\n    console.log('Update voter response:', response.data);\n    return response.data;\n  } catch (error) {\n    console.error('Error updating voter:', error);\n    throw error;\n  }\n};\n\nexport const fetchConsistencyNamesData = async (name) => {\n  console.log(\"in api\",name);\n  try {\n    const response = await axios.get(`${consistency_names_url}?constituency=${name}`);\n    const data = response.data;\n    console.log(\"api constituency\",data)\n    return data;\n  } catch (error) {\n    console.error('Error fetching consistency names data:', error);\n    throw error;\n  }\n};\n\nexport const fetchBoothNamesData = async (name) => {\n  try {\n    console.log(\"Fetching booth names for:\", name);\n    const response = await axios.get(`${booth_names_url}?booth_name=${name}`);\n    const data = response.data;\n    console.log(\"Booth Names Data from API\", data);\n    return data;\n  } catch (error) {\n    console.error('Error fetching booth names data:', error);\n    throw error;\n  }\n};\n\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,UAAU,GAAG,8BAA8B;AACjD,MAAMC,cAAc,GAAG,6CAA6C;AACpE,MAAMC,oBAAoB,GAAG,mDAAmD;AAChF,MAAMC,OAAO,GAAG,8BAA8B;AAC9C,MAAMC,qBAAqB,GAAG,qDAAqD;AACnF,MAAMC,eAAe,GAAG,mDAAmD;AAE3E,OAAO,MAAMC,kBAAkB,GAAG,MAAAA,CAAOC,IAAI,EAACC,gBAAgB,EAACC,SAAS,KAAK;EAC3EC,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACH,gBAAgB,CAAC;EACpDE,OAAO,CAACC,GAAG,CAAC,uBAAuB,EAACF,SAAS,CAAC;EAC/C,IAAI;IACF,MAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAEb,UAAW,iBAAgBQ,gBAAiB,eAAcC,SAAU,SAAQF,IAAK,EAAC,CAAC;IACvH,MAAMO,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BJ,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACG,IAAI,CAAC;IACnC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;IACvD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMC,gBAAgB,GAAG,MAAAA,CAAOC,IAAI,EAACC,YAAY,EAACT,SAAS,KAAK;EACrE,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,IAAI,CAAC;IAC5B,MAAML,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAEZ,cAAe,eAAcgB,IAAK,iBAAgBC,YAAa,eAAcT,SAAU,EAAC,CAAC;IAC7HC,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAACC,QAAQ,CAACE,IAAI,CAAC;IAC5C,MAAMA,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BJ,OAAO,CAACC,GAAG,CAAC,8BAA8B,EAAEG,IAAI,CAAC;IACjD,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;IAChD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMI,wBAAwB,GAAG,MAAAA,CAAOC,MAAM,EAAEb,IAAI,EAACC,gBAAgB,EAAEC,SAAS,KAAK;EAC1F,IAAI;IACFC,OAAO,CAACC,GAAG,CAAC,8CAA8C,EAACS,MAAM,EAAEb,IAAI,EAACC,gBAAgB,EAAEC,SAAU,CAAC;IACrG,MAAMG,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAEX,oBAAqB,WAAUkB,MAAO,iBAAgBZ,gBAAiB,eAAcC,SAAU,SAAQF,IAAK,EAAC,CAAC;IAClJ,MAAMO,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BJ,OAAO,CAACC,GAAG,CAAC,oDAAoD,EAAEG,IAAI,CAAC;IACvE,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,mCAAmC,EAAEA,KAAK,CAAC;IACzD,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMM,WAAW,GAAG,MAAAA,CAAOC,EAAE,EAAEC,aAAa,KAAK;EAExD,IAAI;IACA,MAAMX,QAAQ,GAAG,MAAMb,KAAK,CAACyB,GAAG,CAAE,gCAA+BF,EAAG,EAAC,EAAEC,aAAa,CAAC;IACrFb,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEC,QAAQ,CAACE,IAAI,CAAC;IACpD,OAAOF,QAAQ,CAACE,IAAI;EACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;IAC7C,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMU,yBAAyB,GAAG,MAAOR,IAAI,IAAK;EACvDP,OAAO,CAACC,GAAG,CAAC,QAAQ,EAACM,IAAI,CAAC;EAC1B,IAAI;IACF,MAAML,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAET,qBAAsB,iBAAgBa,IAAK,EAAC,CAAC;IACjF,MAAMH,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BJ,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAACG,IAAI,CAAC;IACpC,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,wCAAwC,EAAEA,KAAK,CAAC;IAC9D,MAAMA,KAAK;EACb;AACF,CAAC;AAED,OAAO,MAAMW,mBAAmB,GAAG,MAAOT,IAAI,IAAK;EACjD,IAAI;IACFP,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEM,IAAI,CAAC;IAC9C,MAAML,QAAQ,GAAG,MAAMb,KAAK,CAACc,GAAG,CAAE,GAAER,eAAgB,eAAcY,IAAK,EAAC,CAAC;IACzE,MAAMH,IAAI,GAAGF,QAAQ,CAACE,IAAI;IAC1BJ,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEG,IAAI,CAAC;IAC9C,OAAOA,IAAI;EACb,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdL,OAAO,CAACK,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;IACxD,MAAMA,KAAK;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}